# Render Infrastructure as Code for Snoball Trading Platform
services:
  # Main Trade Server - WebSocket connections to Alpaca
  - type: web
    name: snoball-trade-server
    runtime: docker
    dockerfilePath: ./apps/trade-server/Dockerfile.render
    plan: starter
    region: ohio # Central US for optimal trading latency
    branch: main

    # Auto-deploy on git push
    autoDeploy: true

    # Health check configuration
    healthCheckPath: /health

    # Environment variables (set in Render dashboard)
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 9090
      - key: ENVIRONMENT
        value: production

    # Build configuration
    buildCommand: echo "Using Dockerfile for build"
    startCommand: bun run src/index.ts

    # Scaling configuration
    numInstances: 1

    # Custom headers for WebSocket support
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-Content-Type-Options
        value: nosniff

  # Background Worker for Order Processing
  - type: worker
    name: snoball-worker
    runtime: docker
    dockerfilePath: ./apps/trade-server/Dockerfile.render
    plan: starter
    region: ohio
    branch: main

    autoDeploy: true

    envVars:
      - key: NODE_ENV
        value: production
      - key: ENVIRONMENT
        value: production
      - key: WORKER_TYPE
        value: order_processor

    buildCommand: echo "Using Dockerfile for build"
    startCommand: bun run src/worker.ts

    numInstances: 1

  # Cron Job for Market Analysis
  - type: cron
    name: snoball-analysis
    runtime: docker
    dockerfilePath: ./apps/trade-server/Dockerfile.render
    plan: starter
    region: ohio
    branch: main

    schedule: "*/30 * * * *" # Every 30 minutes during market hours

    envVars:
      - key: NODE_ENV
        value: production
      - key: ENVIRONMENT
        value: production
      - key: JOB_TYPE
        value: market_analysis

    buildCommand: echo "Using Dockerfile for build"
    startCommand: bun run src/jobs/market-analysis.ts

  # Redis Cache (using Render's native Redis)
  - type: redis
    name: snoball-redis
    plan: starter
    region: ohio

    # Redis configuration
    maxmemoryPolicy: allkeys-lru

    # Access control
    ipAllowList: [] # Will be set to services automatically

# Database configuration (external - PlanetScale)
# Set DATABASE_URL in environment variables

# Notifications are configured in the Render dashboard:
# Dashboard → Service → Settings → Notifications
# Available notification types: email, Slack, Discord, webhook
