# Render Infrastructure as Code for Snoball Trading Platform
# Environment-aware configuration using Render Blueprint variables

services:
  # Main Trade Server - WebSocket connections to Alpaca
  - type: web
    name: ${SERVICE_PREFIX:-snoball-prod}-trade-server
    runtime: docker
    dockerfilePath: ./apps/trade-server/Dockerfile.render
    plan: ${PLAN_TIER:-starter}
    region: ohio # Central US for optimal trading latency
    branch: ${DEPLOY_BRANCH:-main}

    # Auto-deploy on git push
    autoDeploy: true

    # Health check configuration
    healthCheckPath: /health

    # Environment variables (Dockerfile handles service type detection)
    envVars:
      - key: NODE_ENV
        value: ${NODE_ENVIRONMENT:-production}
      - key: PORT
        value: 9090
      - key: ENVIRONMENT
        value: ${APP_ENVIRONMENT:-production}
      - key: ALPACA_ENDPOINT
        value: ${ALPACA_ENDPOINT:-https://api.alpaca.markets}

    # Scaling configuration
    numInstances: 1

  # Background Worker for Order Processing
  - type: worker
    name: ${SERVICE_PREFIX:-snoball-prod}-worker
    runtime: docker
    dockerfilePath: ./apps/trade-server/Dockerfile.render
    plan: ${PLAN_TIER:-starter}
    region: ohio
    branch: ${DEPLOY_BRANCH:-main}

    autoDeploy: true

    envVars:
      - key: NODE_ENV
        value: ${NODE_ENVIRONMENT:-production}
      - key: ENVIRONMENT
        value: ${APP_ENVIRONMENT:-production}
      - key: WORKER_TYPE
        value: order_processor
      - key: ALPACA_ENDPOINT
        value: ${ALPACA_ENDPOINT:-https://api.alpaca.markets}

    numInstances: 1

  # Cron Job for Market Analysis
  - type: cron
    name: ${SERVICE_PREFIX:-snoball-prod}-analysis
    runtime: docker
    dockerfilePath: ./apps/trade-server/Dockerfile.render
    plan: ${PLAN_TIER:-starter}
    region: ohio
    branch: ${DEPLOY_BRANCH:-main}

    schedule: ${CRON_SCHEDULE:-*/30 * * * *}

    envVars:
      - key: NODE_ENV
        value: ${NODE_ENVIRONMENT:-production}
      - key: ENVIRONMENT
        value: ${APP_ENVIRONMENT:-production}
      - key: JOB_TYPE
        value: market_analysis
      - key: ALPACA_ENDPOINT
        value: ${ALPACA_ENDPOINT:-https://api.alpaca.markets}

  # Redis Cache (using Render's native Redis)
  - type: redis
    name: ${SERVICE_PREFIX:-snoball-prod}-redis
    plan: ${REDIS_PLAN:-starter}
    region: ohio

    # Redis configuration
    maxmemoryPolicy: allkeys-lru

    # Access control
    ipAllowList: [] # Will be set to services automatically

# Database configuration (external - PlanetScale)
# Set DATABASE_URL in environment variables

# Notifications are configured in the Render dashboard:
# Dashboard → Service → Settings → Notifications
# Available notification types: email, Slack, Discord, webhook
