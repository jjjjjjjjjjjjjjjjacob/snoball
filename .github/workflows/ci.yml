name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Application Settings
  NODE_ENV: test
  ENVIRONMENT: test
  BUN_VERSION: latest
  
  # Database Configuration (Atomic Variables)
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
  DATABASE_POOLING_PORT: ${{ secrets.DATABASE_POOLING_PORT }}
  
  # Testing APIs (Paper Trading)
  ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
  ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
  ALPACA_ENDPOINT: https://paper-api.alpaca.markets
  
  # Authentication (Test Environment)
  WORKOS_API_KEY: ${{ secrets.WORKOS_API_KEY }}
  WORKOS_CLIENT_ID: ${{ secrets.WORKOS_CLIENT_ID }}
  WORKOS_WEBHOOK_SECRET: ${{ secrets.WORKOS_WEBHOOK_SECRET }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: http://localhost:3000
  
  # Security
  ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run linting
        run: bun run lint
      
      - name: Type check
        run: bun run type-check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    environment: test
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: snoball_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Database health check
        run: |
          # Test local postgres connection
          PGPASSWORD=test_password psql -h localhost -U postgres -d snoball_test -c "SELECT 1;"
          
          # Test Redis connection  
          redis-cli -h localhost ping

      - name: Run database migrations
        env:
          # Override for local test database
          DATABASE_HOST: localhost
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: snoball_test
          DATABASE_SSL: false
        run: |
          # Run migrations against test database
          bun run migrate:deploy
      
      - name: Run tests with coverage
        run: bun test --coverage
        env:
          # Use test database for tests
          DATABASE_HOST: localhost
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: snoball_test
          DATABASE_SSL: false
          REDIS_URL: redis://localhost:6379

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build all packages
        run: bun run build
      
      - name: Test Docker builds
        run: |
          # Test Docker builds without pushing
          docker build -f apps/trade-server/Dockerfile.render -t trade-server:test . || echo "Trade server Docker build failed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit || echo "Audit found issues - review them"

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  database-validation:
    name: Database Migration Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment: test
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: snoball_migration_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Test database migrations
        env:
          DATABASE_HOST: localhost
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: snoball_migration_test
          DATABASE_SSL: false
        run: |
          # Test migration up
          bun run migrate:deploy
          
          # Verify schema
          PGPASSWORD=test_password psql -h localhost -U postgres -d snoball_migration_test -c "\dt"
          
          # Test that application can connect
          if command -v bun run db:test &> /dev/null; then
            bun run db:test
          else
            echo "db:test script not found, skipping connection test"
          fi

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build applications
        run: bun run build

      - name: Analyze bundle size
        run: |
          echo "📊 Bundle Size Analysis"
          # Check if any bundles are unusually large
          if find . -name "*.js" -path "*/dist/*" | head -1 | grep -q .; then
            find . -name "*.js" -path "*/dist/*" -exec ls -lh {} \; | \
            awk '$5 ~ /[0-9]+M/ { print "⚠️  Large bundle found: " $9 " (" $5 ")" }'
          else
            echo "No JavaScript bundles found in dist directories"
          fi

      - name: Check for large dependencies
        run: |
          echo "📦 Largest Dependencies"
          if [ -d "node_modules" ]; then
            du -sh node_modules/* | sort -hr | head -10
          else
            echo "node_modules not found"
          fi

  notify-status:
    name: Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, security-scan]
    if: always()
    
    steps:
      - name: Check job status
        run: |
          echo "🔍 CI Results Summary:"
          
          if [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "❌ Linting failed"
            exit_code=1
          else
            echo "✅ Linting passed"
          fi
          
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "❌ Tests failed"
            exit_code=1
          else
            echo "✅ Tests passed"
          fi
          
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit_code=1
          else
            echo "✅ Build passed"
          fi
          
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "❌ Security scan failed"
            exit_code=1
          else
            echo "✅ Security scan passed"
          fi
          
          if [[ -n "$exit_code" ]]; then
            echo "❌ CI Pipeline Failed"
            exit 1
          else
            echo "🎉 All CI checks passed!"
          fi