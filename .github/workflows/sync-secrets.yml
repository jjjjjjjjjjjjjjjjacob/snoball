name: Sync Secrets to Services

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to sync secrets to'
        required: true
        type: choice
        options:
          - test
          - production
        default: 'production'
      
      services:
        description: 'Services to sync (all, render, vercel)'
        required: true
        type: choice
        options:
          - all
          - render
          - vercel
        default: 'all'

jobs:
  sync-render:
    name: Sync Secrets to Render
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.services == 'all' || github.event.inputs.services == 'render'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sync Database & Auth Secrets to Render Services
        run: |
          echo "üîÑ Syncing secrets to Render services..."
          
          # Get service IDs from secrets
          TRADE_SERVER="${{ secrets.RENDER_TRADE_SERVER_ID }}"
          WORKER="${{ secrets.RENDER_WORKER_ID }}"
          
          if [[ -z "$TRADE_SERVER" || -z "$WORKER" ]]; then
            echo "‚ö†Ô∏è Missing Render service IDs. Please set RENDER_TRADE_SERVER_ID and RENDER_WORKER_ID secrets."
            exit 1
          fi
          
          # Services to update
          SERVICES="$TRADE_SERVER $WORKER"
          
          # Prepare the environment variables JSON
          ENV_VARS_JSON=$(cat <<EOF
          {
            "DATABASE_HOST": "${{ secrets.DATABASE_HOST }}",
            "DATABASE_PORT": "${{ secrets.DATABASE_PORT }}",
            "DATABASE_NAME": "${{ secrets.DATABASE_NAME }}",
            "DATABASE_USERNAME": "${{ secrets.DATABASE_USERNAME }}",
            "DATABASE_PASSWORD": "${{ secrets.DATABASE_PASSWORD }}",
            "DATABASE_SSL": "${{ secrets.DATABASE_SSL }}",
            "DATABASE_POOLING_PORT": "${{ secrets.DATABASE_POOLING_PORT }}",
            "NEXTAUTH_SECRET": "${{ secrets.NEXTAUTH_SECRET }}",
            "WORKOS_API_KEY": "${{ secrets.WORKOS_API_KEY }}",
            "WORKOS_CLIENT_ID": "${{ secrets.WORKOS_CLIENT_ID }}",
            "ENCRYPTION_KEY": "${{ secrets.ENCRYPTION_KEY }}"
          }
          EOF
          )
          
          # Update each service
          for SERVICE_ID in $SERVICES; do
            echo "üì° Updating service: $SERVICE_ID"
            
            RESPONSE=$(curl -s -w "%{http_code}" -X PATCH \
              "https://api.render.com/v1/services/${SERVICE_ID}/env-vars" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "$ENV_VARS_JSON")
            
            HTTP_CODE="${RESPONSE: -3}"
            
            if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
              echo "‚úÖ Successfully updated service: $SERVICE_ID"
            else
              echo "‚ùå Failed to update service: $SERVICE_ID (HTTP $HTTP_CODE)"
              echo "$RESPONSE"
              exit 1
            fi
          done
          
          echo "üéâ All Render services updated successfully!"

  sync-vercel:
    name: Sync Secrets to Vercel
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.services == 'all' || github.event.inputs.services == 'vercel'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Vercel CLI
        run: |
          npm install -g vercel@latest
          
      - name: Sync Database & Auth Secrets to Vercel
        run: |
          echo "üîÑ Syncing secrets to Vercel..."
          
          # Map GitHub environment to Vercel environment
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            VERCEL_ENV="production"
          else
            VERCEL_ENV="preview"
          fi
          
          echo "üì° Syncing to Vercel environment: $VERCEL_ENV"
          
          # Secrets to sync (shared across services)
          SECRETS=(
            "DATABASE_HOST"
            "DATABASE_PORT" 
            "DATABASE_NAME"
            "DATABASE_USERNAME"
            "DATABASE_PASSWORD"
            "DATABASE_SSL"
            "DATABASE_POOLING_PORT"
            "NEXTAUTH_SECRET"
            "WORKOS_API_KEY"
            "WORKOS_CLIENT_ID"
            "ENCRYPTION_KEY"
          )
          
          # Sync each secret
          for SECRET_NAME in "${SECRETS[@]}"; do
            echo "üîÑ Syncing $SECRET_NAME..."
            
            # Get the secret value using GitHub's secret context
            case $SECRET_NAME in
              "DATABASE_HOST")
                SECRET_VALUE="${{ secrets.DATABASE_HOST }}"
                ;;
              "DATABASE_PORT")
                SECRET_VALUE="${{ secrets.DATABASE_PORT }}"
                ;;
              "DATABASE_NAME")
                SECRET_VALUE="${{ secrets.DATABASE_NAME }}"
                ;;
              "DATABASE_USERNAME")
                SECRET_VALUE="${{ secrets.DATABASE_USERNAME }}"
                ;;
              "DATABASE_PASSWORD")
                SECRET_VALUE="${{ secrets.DATABASE_PASSWORD }}"
                ;;
              "DATABASE_SSL")
                SECRET_VALUE="${{ secrets.DATABASE_SSL }}"
                ;;
              "DATABASE_POOLING_PORT")
                SECRET_VALUE="${{ secrets.DATABASE_POOLING_PORT }}"
                ;;
              "NEXTAUTH_SECRET")
                SECRET_VALUE="${{ secrets.NEXTAUTH_SECRET }}"
                ;;
              "WORKOS_API_KEY")
                SECRET_VALUE="${{ secrets.WORKOS_API_KEY }}"
                ;;
              "WORKOS_CLIENT_ID")
                SECRET_VALUE="${{ secrets.WORKOS_CLIENT_ID }}"
                ;;
              "ENCRYPTION_KEY")
                SECRET_VALUE="${{ secrets.ENCRYPTION_KEY }}"
                ;;
            esac
            
            if [[ -n "$SECRET_VALUE" ]]; then
              # Remove existing variable if present
              vercel env rm "$SECRET_NAME" "$VERCEL_ENV" --yes --token="${{ secrets.VERCEL_TOKEN }}" 2>/dev/null || true
              
              # Add new value
              echo "$SECRET_VALUE" | vercel env add "$SECRET_NAME" "$VERCEL_ENV" --token="${{ secrets.VERCEL_TOKEN }}"
              
              if [[ $? -eq 0 ]]; then
                echo "‚úÖ Successfully synced $SECRET_NAME"
              else
                echo "‚ùå Failed to sync $SECRET_NAME"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è Secret $SECRET_NAME is empty or not set"
            fi
          done
          
          echo "üéâ All Vercel secrets updated successfully!"

  validate-sync:
    name: Validate Secret Sync
    runs-on: ubuntu-latest
    needs: [sync-render, sync-vercel]
    if: always()
    
    steps:
      - name: Check sync results
        run: |
          echo "üìä Secret Sync Summary:"
          
          RENDER_RESULT="${{ needs.sync-render.result }}"
          VERCEL_RESULT="${{ needs.sync-vercel.result }}"
          
          if [[ "$RENDER_RESULT" == "success" || "$RENDER_RESULT" == "skipped" ]]; then
            echo "‚úÖ Render sync: $RENDER_RESULT"
          else
            echo "‚ùå Render sync: $RENDER_RESULT"
            FAILED=true
          fi
          
          if [[ "$VERCEL_RESULT" == "success" || "$VERCEL_RESULT" == "skipped" ]]; then
            echo "‚úÖ Vercel sync: $VERCEL_RESULT"
          else
            echo "‚ùå Vercel sync: $VERCEL_RESULT"
            FAILED=true
          fi
          
          if [[ "$FAILED" == "true" ]]; then
            echo "‚ùå Secret synchronization failed!"
            exit 1
          else
            echo "üéâ Secret synchronization completed successfully!"
          fi
          
          echo ""
          echo "üîç Next Steps:"
          echo "1. Check service logs to ensure applications restart properly"
          echo "2. Verify connectivity to database and APIs"
          echo "3. Test critical application flows"