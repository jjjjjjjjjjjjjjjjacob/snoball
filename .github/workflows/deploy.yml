name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  # Deployment Environment
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  BUN_VERSION: latest

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    outputs:
      should-deploy: ${{ steps.check-deploy.outputs.deploy }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if deployment should proceed
        id: check-deploy
        run: |
          # Check if we're on main branch or manual trigger
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest commit info
        run: |
          echo "üöÄ Deployment Info:"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          
          # Get commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Message: $COMMIT_MSG"

  sync-secrets:
    name: Sync Secrets to Services
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger secret synchronization workflow
        run: |
          echo "üîÑ Triggering secret synchronization workflow..."
          
          # Trigger the sync-secrets workflow via GitHub API
          gh workflow run sync-secrets.yml \
            -f environment="${{ github.event.inputs.environment || 'production' }}" \
            -f services="all"
          
          echo "‚úÖ Secret sync workflow triggered"
        env:
          GH_TOKEN: ${{ github.token }}

  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, sync-secrets]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    env:
      # PlanetScale Database (Atomic Variables)
      # Repository secrets (same for all environments)
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
      DATABASE_POOLING_PORT: ${{ secrets.DATABASE_POOLING_PORT }}
      # Environment-specific secrets
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Test database connection
        run: |
          echo "üîç Testing database connection..."
          # Test connection using atomic variables
          if bun run db:test; then
            echo "‚úÖ Database connection successful"
          else
            echo "‚ùå Database connection failed"
            exit 1
          fi

      - name: Run database migrations
        run: |
          echo "üèóÔ∏è Running database migrations..."
          bun run migrate:deploy
          echo "‚úÖ Migrations completed successfully"

      - name: Verify migration status
        run: |
          echo "üîç Verifying migration status..."
          # Add any migration verification commands here
          echo "‚úÖ Migration verification complete"

  deploy-backend:
    name: Deploy Backend Services
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, database-migration]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        run: |
          echo "üöÄ Triggering Render deployment..."
          echo "Render services will auto-deploy from this Git push."
          echo "Monitor deployment at: https://dashboard.render.com"
          
          # Optional: Use Render API to trigger manual deployment
          if [[ -n "${{ secrets.RENDER_API_KEY }}" ]]; then
            echo "üì° Triggering manual deployment via Render API..."
            
            # Trigger trade-server deployment
            curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_TRADE_SERVER_ID }}/deploys" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d '{"clearCache": false}' || echo "Manual trigger failed, auto-deploy will handle it"
              
            # Trigger worker deployment  
            curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_WORKER_ID }}/deploys" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d '{"clearCache": false}' || echo "Manual trigger failed, auto-deploy will handle it"
          else
            echo "‚ö†Ô∏è RENDER_API_KEY not set, relying on auto-deployment"
          fi

      - name: Check deployment status
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 30
          
          # Health check the deployed service
          if curl -f -s "${{ secrets.RENDER_SERVICE_URL }}/health" > /dev/null; then
            echo "‚úÖ Backend deployment healthy"
          else
            echo "‚ùå Backend deployment may have failed"
            exit 1
          fi

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, deploy-backend]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        run: |
          echo "üöÄ Triggering Vercel deployment..."
          echo "Vercel will auto-deploy from this Git push."
          echo "Monitor deployment at: https://vercel.com/dashboard"
          
          # Optional: Use Vercel API for deployment status
          if [[ -n "${{ secrets.VERCEL_TOKEN }}" ]]; then
            echo "üì° Checking Vercel deployment status..."
            # Add Vercel API calls here if needed
          else
            echo "‚ö†Ô∏è VERCEL_TOKEN not set, relying on auto-deployment"
          fi

      - name: Check frontend deployment
        run: |
          echo "‚è≥ Waiting for frontend deployment..."
          sleep 30
          
          # Health check the deployed frontend
          if curl -f -s "${{ secrets.VERCEL_APP_URL }}" > /dev/null; then
            echo "‚úÖ Frontend deployment healthy"
          else
            echo "‚ùå Frontend deployment may have failed"
            exit 1
          fi

  post-deploy-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    
    steps:
      - name: End-to-end health check
        run: |
          echo "üîç Running end-to-end health checks..."
          
          # Check backend API
          echo "Checking backend API..."
          if curl -f -s "${{ secrets.RENDER_SERVICE_URL }}/health"; then
            echo "‚úÖ Backend API healthy"
          else
            echo "‚ùå Backend API failed health check"
            exit 1
          fi
          
          # Check frontend
          echo "Checking frontend..."
          if curl -f -s "${{ secrets.VERCEL_APP_URL }}"; then
            echo "‚úÖ Frontend healthy"
          else
            echo "‚ùå Frontend failed health check"
            exit 1
          fi
          
          # Check database connectivity (optional)
          echo "‚úÖ All services healthy"

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          # Add any critical post-deployment tests here
          echo "‚úÖ Smoke tests passed"

      - name: Update deployment status
        run: |
          echo "üìä Deployment Summary:"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Status: ‚úÖ SUCCESS"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, sync-secrets, database-migration, deploy-backend, deploy-frontend, post-deploy-verification]
    if: always()
    
    steps:
      - name: Deployment notification
        run: |
          if [[ "${{ needs.post-deploy-verification.result }}" == "success" ]]; then
            echo "üéâ Deployment to ${{ env.ENVIRONMENT }} completed successfully!"
            echo "Frontend: ${{ secrets.VERCEL_APP_URL }}"
            echo "Backend: ${{ secrets.RENDER_SERVICE_URL }}"
          else
            echo "‚ùå Deployment to ${{ env.ENVIRONMENT }} failed!"
            echo "Check the logs above for details."
            
            # List failed jobs
            if [[ "${{ needs.database-migration.result }}" == "failure" ]]; then
              echo "- Database migration failed"
            fi
            if [[ "${{ needs.deploy-backend.result }}" == "failure" ]]; then
              echo "- Backend deployment failed"
            fi
            if [[ "${{ needs.deploy-frontend.result }}" == "failure" ]]; then
              echo "- Frontend deployment failed"
            fi
            if [[ "${{ needs.post-deploy-verification.result }}" == "failure" ]]; then
              echo "- Post-deployment verification failed"
            fi
          fi

      # Optional: Add Slack/Discord/email notifications here
      - name: Slack notification
        if: false  # Enable by changing to true and adding SLACK_WEBHOOK_URL secret
        run: |
          STATUS="${{ needs.post-deploy-verification.result }}"
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="üéâ Deployment to ${{ env.ENVIRONMENT }} successful!"
            COLOR="good"
          else
            MESSAGE="‚ùå Deployment to ${{ env.ENVIRONMENT }} failed!"
            COLOR="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\", \"color\":\"$COLOR\"}" \
            "${{ secrets.SLACK_WEBHOOK_URL }}"