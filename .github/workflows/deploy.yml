name: Deploy

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  sync-secrets:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Sync Secrets to AWS
        run: |
          # Only sync if secrets are configured
          if [ -n "${{ secrets.ALPACA_API_KEY_ID }}" ]; then
            aws secretsmanager put-secret-value \
              --secret-id ${{ github.event.inputs.environment || 'development' }}/github/sync \
              --secret-string '{
                "ALPACA_API_KEY_ID": "${{ secrets.ALPACA_API_KEY_ID }}",
                "ALPACA_SECRET_KEY": "${{ secrets.ALPACA_SECRET_KEY }}",
                "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}",
                "ANTHROPIC_API_KEY": "${{ secrets.ANTHROPIC_API_KEY }}",
                "SENTRY_DSN": "${{ secrets.SENTRY_DSN }}",
                "ENCRYPTION_KEY": "${{ secrets.ENCRYPTION_KEY }}"
              }' || echo "Secrets not configured yet"
          fi

  deploy-database:
    needs: sync-secrets
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PlanetScale CLI
        run: |
          curl -sSL https://github.com/planetscale/cli/releases/latest/download/pscale_linux_amd64.tar.gz | tar xz
          sudo mv pscale /usr/local/bin/
      
      - name: Run migrations
        env:
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
        run: |
          if [ -n "$PLANETSCALE_SERVICE_TOKEN" ]; then
            pscale database create-deploy-request \
              snoball-${{ github.event.inputs.environment || 'development' }} \
              main \
              --org ${{ secrets.PLANETSCALE_ORG }} || echo "Database not configured yet"
            
            # Apply schema changes
            bun run migrate:deploy || echo "Migrations pending"
          fi

  deploy-backend:
    needs: [sync-secrets, deploy-database]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    if: success() || failure()
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Deploy Trade Server to ECS
        run: |
          if [ -n "${{ secrets.AWS_ROLE_ARN }}" ]; then
            aws ecs update-service \
              --cluster ${{ github.event.inputs.environment || 'development' }}-snoball-cluster \
              --service ${{ github.event.inputs.environment || 'development' }}-trade-server \
              --force-new-deployment || echo "ECS not configured yet"
          fi
      
      - name: Deploy Lambda Functions
        run: |
          if [ -n "${{ secrets.ECR_REGISTRY }}" ]; then
            for function in analyze-market calculate-confidence risk-assessment; do
              aws lambda update-function-code \
                --function-name ${{ github.event.inputs.environment || 'development' }}-${function} \
                --image-uri ${{ secrets.ECR_REGISTRY }}/${function}:${{ github.sha }} || echo "Lambda ${function} not configured yet"
            done
          fi

  deploy-frontend:
    needs: sync-secrets
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.23
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build frontend
        run: |
          cd apps/web && bun run build || echo "Build pending"
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
          NEXT_PUBLIC_WS_URL: ${{ secrets.WS_URL }}
      
      - name: Deploy to Vercel
        if: secrets.VERCEL_TOKEN != ''
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./apps/web